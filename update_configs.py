#!/usr/bin/env python3
import os
from typing import Any, List

import yaml


def update_mypy_ini() -> None:
    dirs_with_src = [root for root, dirs, _ in os.walk("plugins") if "src" in dirs]
    dirs_with_src.insert(0, "core/src")

    with open("mypy.ini", "r") as f:
        content = f.readlines()
    header = ";  mypy_path generated by update-config.py using pre-commit hook\n"
    updated = False
    if not content or content[0] != header:
        content.insert(0, header)
        updated = True
    new_mypy_path = f"mypy_path = {','.join(dirs_with_src)}\n"
    for idx, line in enumerate(content):
        if line.startswith("mypy_path"):
            if line != new_mypy_path:
                content[idx] = new_mypy_path
                updated = True
            break
    if updated:
        with open("mypy.ini", "w") as f:
            f.writelines(content)
        print("mypy.ini updated for new plugins.")
    return


def update_pytest_ini() -> None:
    with open("pytest.ini", "r") as f:
        content = f.readlines()
    header = ";  pythonpath, testpaths generated by update-config.py using pre-commit hook\n"
    updated = False
    if not content or content[0] != header:
        content.insert(0, header)
        updated = True
    src_dirs = [root for root, _, _ in os.walk("plugins") if os.path.basename(root) == "src"]
    src_dirs.insert(0, "core/src")
    new_pythonpath = f"pythonpath = {' '.join(src_dirs)}\n"
    test_dirs = [root for root, _, _ in os.walk("plugins") if os.path.basename(root) == "tests"]
    test_dirs.insert(0, "core/tests")
    new_testpaths = f"testpaths = {' '.join(test_dirs)}\n"
    for idx, line in enumerate(content):
        if line.startswith("pythonpath = "):
            if line != new_pythonpath:
                content[idx] = new_pythonpath
                updated = True
        elif line.startswith("testpaths = "):
            if line != new_testpaths:
                content[idx] = new_testpaths
                updated = True
    if updated:
        with open("pytest.ini", "w") as f:
            f.writelines(content)
        print("pytest.ini updated for new plugins.")

    return


def none_representer(dumper, data): # type: ignore
    return dumper.represent_scalar("tag:yaml.org,2002:null", "")


for resolver in list(yaml.SafeLoader.yaml_implicit_resolvers.get("o", [])):
    if resolver[0] == "tag:yaml.org,2002:bool":
        yaml.SafeLoader.yaml_implicit_resolvers["o"].remove(resolver)


class CustomDumper(yaml.SafeDumper):
    def increase_indent(self, flow=False, indentless=False): # type: ignore
        return super(CustomDumper, self).increase_indent(flow, False)


def is_simple_string_list(lst: List[Any]) -> bool:
    return all(isinstance(item, str) and "\n" not in item for item in lst)


def represent_list(dumper, data) -> Any:  # type: ignore
    """Represents the list of strings as a single line if possible."""
    if is_simple_string_list(data) and "bodhiext" not in "".join(data):
        return dumper.represent_sequence("tag:yaml.org,2002:seq", data, flow_style=True)
    else:
        return dumper.represent_sequence("tag:yaml.org,2002:seq", data, flow_style=False)


def represent_ordered_dict(dumper, data) -> Any:  # type: ignore
    """Custom representer for dictionaries to maintain the insertion order."""
    return dumper.represent_mapping("tag:yaml.org,2002:map", data.items())


def multi_line_string_representer(dumper, data) -> Any:  # type: ignore
    """Represents multi-line strings with the '|' character."""
    if "\n" in data:
        return dumper.represent_scalar("tag:yaml.org,2002:str", data, style="|")
    return dumper.represent_scalar("tag:yaml.org,2002:str", data)


# Add the custom representer to only the CustomSafeDumper
CustomDumper.add_representer(list, represent_list)
CustomDumper.add_representer(dict, represent_ordered_dict)
CustomDumper.add_representer(str, multi_line_string_representer)
CustomDumper.add_representer(type(None), none_representer)


def updated_github_workflows() -> None:
    workflows = yaml.safe_load(open(".github/workflows/plugins.yml", "r").read())
    current_options = sorted(workflows["on"]["workflow_dispatch"]["inputs"]["plugin"]["options"])
    dirs_with_pyproject = sorted(
        [root.replace("plugins/", "") for root, _, files in os.walk("plugins") if "pyproject.toml" in files]
    )
    dirs_with_pyproject.insert(0, "all")
    if current_options == dirs_with_pyproject:
        return
    workflows["on"]["workflow_dispatch"]["inputs"]["plugin"]["options"] = dirs_with_pyproject
    with open(".github/workflows/plugins.yml", "w") as f:
        yaml.dump(workflows, f, Dumper=CustomDumper)
    print("Updated github workflows for new plugins.")

if __name__ == "__main__":
    update_mypy_ini()
    update_pytest_ini()
    updated_github_workflows()
