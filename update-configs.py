#!/usr/bin/env python3
import os


def update_mypy_ini() -> None:
    dirs_with_src = [root for root, dirs, _ in os.walk("plugins") if "src" in dirs]
    dirs_with_src.insert(0, "core/src")

    with open("mypy.ini", "r") as f:
        content = f.readlines()
    header = ";  mypy_path generated by update-config.py using pre-commit hook\n"
    updated = False
    if not content or content[0] != header:
        content.insert(0, header)
        updated = True
    new_mypy_path = f"mypy_path = {','.join(dirs_with_src)}\n"
    for idx, line in enumerate(content):
        if line.startswith("mypy_path"):
            if line != new_mypy_path:
                content[idx] = new_mypy_path
                updated = True
            break
    if updated:
        with open("mypy.ini", "w") as f:
            f.writelines(content)
        print("mypy.ini updated for new plugins.")
    return


def update_pytest_ini() -> None:
    with open("pytest.ini", "r") as f:
        content = f.readlines()
    header = (
        ";  pythonpath, testpaths generated by update-config.py using pre-commit hook\n"
    )
    updated = False
    if not content or content[0] != header:
        content.insert(0, header)
        updated = True
    src_dirs = [
        root for root, _, _ in os.walk("plugins") if os.path.basename(root) == "src"
    ]
    src_dirs.insert(0, "core/src")
    new_pythonpath = f"pythonpath = {' '.join(src_dirs)}\n"
    test_dirs = [
        root for root, _, _ in os.walk("plugins") if os.path.basename(root) == "tests"
    ]
    test_dirs.insert(0, "core/tests")
    new_testpaths = f"testpaths = {' '.join(test_dirs)}\n"
    for idx, line in enumerate(content):
        if line.startswith("pythonpath = "):
            if line != new_pythonpath:
                content[idx] = new_pythonpath
                updated = True
        elif line.startswith("testpaths = "):
            if line != new_testpaths:
                content[idx] = new_testpaths
                updated = True
    if updated:
        with open("pytest.ini", "w") as f:
            f.writelines(content)
        print("pytest.ini updated for new plugins.")

    return


if __name__ == "__main__":
    update_mypy_ini()
    update_pytest_ini()
