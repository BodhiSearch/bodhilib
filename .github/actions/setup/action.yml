# action.yml
# https://github.com/actions/setup-python/issues/505#issuecomment-1273013236
name: poetry-install-with-caching
description: Poetry install with support for caching of dependency groups.

inputs:
  python-version:
    description: Python version, supporting MAJOR.MINOR only
    required: true
    default: '3.8'

  pipx-version:
    description: Pipx version
    required: false
    default: 1.2.0

  poetry-version:
    description: Poetry version
    required: false
    default: 1.6.1

  install-command:
    description: Command run for installing dependencies
    required: false
    default: poetry install --compile --sync

  working-directory:
    description: Directory to run install-command in
    required: false
    default: '.'

runs:
  using: composite
  steps:
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install poetry using pipx
      shell: bash
      run: |
        pipx install poetry==${{ inputs.poetry-version }} --python python${{ inputs.python-version }}
    - name: Export the poetry.lock location
      id: poetry_lock_file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Current Working Directory is: $(pwd)"
        POETRY_LOCK_FILE=${{ inputs.working-directory }}/poetry.lock
        echo "poetry_lock_file=${POETRY_LOCK_FILE}"
        echo "poetry_lock_file=${POETRY_LOCK_FILE}" >> $GITHUB_OUTPUT
    - name: Set the CACHE_KEY in environment
      id: cache-key
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Current Working Directory is: $(pwd)"
        LOCK_HASHES=${{ hashFiles(steps.poetry_lock_file.outputs.poetry_lock_file, 'poetry.lock', 'ci/requirements.txt') }}
        CACHE_KEY=os-${{ runner.os }}-${{ runner.arch }}-py-${{ inputs.python-version }}-poetry-${{ inputs.poetry-version }}-lock-${LOCK_HASHES}
        echo "CACHE_KEY=${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV
    - id: cache-dirs
      name: Get pip cache dir
      shell: bash
      run: |
        PIP_CACHE_DIR=$(python -m pip cache dir)
        echo "pip-cache-dir=${PIP_CACHE_DIR}"
        echo "pip-cache-dir=${PIP_CACHE_DIR}" >> $GITHUB_OUTPUT
        POETRY_CACHE_DIR=$(poetry config cache-dir)
        echo "poetry-cache-dir=${POETRY_CACHE_DIR}"
        echo "poetry-cache-dir=${POETRY_CACHE_DIR}" >> $GITHUB_OUTPUT
        POETRY_VIRTUAL_ENV=$(poetry config virtualenvs.path)
        echo "poetry-virtualenv-dir=${POETRY_VIRTUAL_ENV}"
        echo "poetry-virtualenv-dir=${POETRY_VIRTUAL_ENV}" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      id: cache-pip
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MIN: '15'
      with:
        path: |
          ${{ steps.cache-dirs.outputs.pip-cache-dir }}
          ${{ steps.cache-dirs.outputs.poetry-cache-dir }}
          ${{ steps.cache-dirs.outputs.poetry-virtualenv-dir }}
        key: ${{ env.CACHE_KEY }}
    - name: Install poetry dependencies
      if: ${{ inputs.working-directory != '.' }}
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        ${{ inputs.install-command }}
    - name: Install root poetry ci dependencies
      shell: bash
      working-directory: '.'
      run: |
        poetry install --only ci
    - name: Install root poetry ci dependencies
      shell: bash
      run: |
        pip install -r ci/requirements.txt
