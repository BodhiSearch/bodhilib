# action.yml
# https://github.com/actions/setup-python/issues/505#issuecomment-1273013236
name: poetry-install-with-caching
description: Poetry install with support for caching of dependency groups.

inputs:
  python-version:
    description: Python version, supporting MAJOR.MINOR only
    required: true
    default: '3.8'

  pipx-version:
    description: Pipx version
    required: false
    default: 1.2.0

  poetry-version:
    description: Poetry version
    required: false
    default: 1.6.1

  install-command:
    description: Command run for installing dependencies
    required: false
    default: poetry install --compile --sync

  working-directory:
    description: Directory to run install-command in
    required: false
    default: '.'

  setup:
    description: |
      setup=='true' = Setup the environment if cache does not exists
      setup=='false' = If cache not found, and setup='false', build will fail as no cache, and setup false
        this is to prevent a build from updating an existing cache by mistake.
        poetry caches the virtualenv and needs no re-install.
    required: false
    default: 'false'

runs:
  using: composite
  steps:
    - name: Export the poetry.lock location
      id: poetry_lock_file
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Current Working Directory is: $(pwd)"
        POETRY_LOCK_FILE=${{ inputs.working-directory }}/poetry.lock
        echo "poetry_lock_file=${POETRY_LOCK_FILE}"
        echo "poetry_lock_file=${POETRY_LOCK_FILE}" >> $GITHUB_OUTPUT
    - name: Set the CACHE_KEY in environment
      id: cache-key
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "Current Working Directory is: $(pwd)"
        POETRY_LOCK_HASH=${{ hashFiles(steps.poetry_lock_file.outputs.poetry_lock_file) }}
        ROOT_POETRY_HASH=${{ hashFiles('poetry.lock') }}
        CACHE_KEY=os-${{ runner.os }}-${{ runner.arch }}-py-${{ inputs.python-version }}-poetry-${{ inputs.poetry-version }}-${POETRY_LOCK_HASH}-${ROOT_POETRY_HASH}
        echo "CACHE_KEY=${CACHE_KEY}"
        echo "CACHE_KEY=${CACHE_KEY}" >> $GITHUB_ENV
    - name: Check cache without downloading
      id: check-cache
      shell: bash
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        gh extension install actions/gh-actions-cache
        CACHE_HIT=$(gh actions-cache list --key $CACHE_KEY | grep -q $CACHE_KEY && echo 'true' || echo 'false')
        echo "CACHE_HIT=$CACHE_HIT" >> $GITHUB_ENV
        echo "CACHE_HIT=$CACHE_HIT"
    - name: Verify if CACHE_HIT=false (no cache exists) and setup=false, then fail; environment setup is required if no cache exists
      id: check-cache-miss-and-setup
      shell: bash
      run: |
        if [[ "${CACHE_HIT}" != "true" && "${{ inputs.setup }}" == "false" ]]; then
          echo "Cache miss and setup==false, failing."
          exit 1
        fi
    - uses: actions/setup-python@v4
      with:
        python-version: ${{ inputs.python-version }}
    - name: Install poetry using pipx
      shell: bash
      run: |
        pipx install poetry==${{ inputs.poetry-version }} --python python${{ inputs.python-version }}
    - id: cache-dirs
      name: Get pip cache dir
      shell: bash
      run: |
        PIP_CACHE_DIR=$(python -m pip cache dir)
        echo "pip-cache-dir=${PIP_CACHE_DIR}"
        echo "pip-cache-dir=${PIP_CACHE_DIR}" >> $GITHUB_OUTPUT
        POETRY_CACHE_DIR=$(poetry config cache-dir)
        echo "poetry-cache-dir=${POETRY_CACHE_DIR}"
        echo "poetry-cache-dir=${POETRY_CACHE_DIR}" >> $GITHUB_OUTPUT
        POETRY_VIRTUAL_ENV=$(poetry config virtualenvs.path)
        echo "poetry-virtualenv-dir=${POETRY_VIRTUAL_ENV}"
        echo "poetry-virtualenv-dir=${POETRY_VIRTUAL_ENV}" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      id: cache-pip
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MIN: '15'
      with:
        path: |
          ${{ steps.cache-dirs.outputs.pip-cache-dir }}
          ${{ steps.cache-dirs.outputs.poetry-cache-dir }}
          ${{ steps.cache-dirs.outputs.poetry-virtualenv-dir }}
        key: ${{ env.CACHE_KEY }}
    - name: Install poetry dependencies
      if: env.CACHE_HIT != 'true' && inputs.setup == 'true' && inputs.working-directory != '.'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        ${{ inputs.install-command }}
    - name: Install root poetry ci dependencies
      if: env.CACHE_HIT != 'true' && inputs.setup == 'true'
      shell: bash
      working-directory: '.'
      run: |
        poetry install --only ci
    - name: Install root poetry ci dependencies
      shell: bash
      run: |
        pip install -r ci/requirements.txt
