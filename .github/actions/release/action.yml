name: release
description: Release and pre-release workflow for core and plugins

inputs:
  working-directory:
    description: Directory to run commands in
    required: false
    default: '.'
  release:
    description: Release type - yes (release), pre (pre-release)
    required: true
    default: 'pre'

runs:
  using: composite
  steps:
    - name: Validate input args
      shell: bash
      run: |
        if [[ "${{ inputs.release }}" != "yes" && "${{ inputs.release }}" != "pre" ]]; then
          echo "Invalid release type: ${{ inputs.release }}"
          exit 1
        fi
        # fail if working dir does not exists
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "Working directory does not exist: ${{ inputs.working-directory }}"
          exit 1
        fi
        # fail if working dir does not have pyproject.toml
        if [[ ! -f "${{ inputs.working-directory }}/pyproject.toml" ]]; then
          echo "Working directory does not have pyproject.toml: ${{ inputs.working-directory }}"
          exit 1
        fi
    - name: set $PROJECT_ID
      shell: bash
      run: |
        if [[ -z "${{ inputs.working-directory }}" == "core" ]]; then
          PROJECT_ID=core
          IS_PLUGIN=false
        else
          PROJECT_ID=sed 's/${{ inputs.working-directory }}"/plugins\///'
          IS_PLUGIN=true
        fi
        echo "PROJECT_ID=$PROJECT_ID" # debug
        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
        echo "IS_PLUGIN=$IS_PLUGIN" # debug
        echo "IS_PLUGIN=$IS_PLUGIN" >> $GITHUB_ENV
    - name: Checkout code
      uses: actions/checkout@v3
    - name: Set up Python with Poetry
      uses: './.github/actions/setup'
      with:
        working-directory: ${{ inputs.working-directory }}
    - name: Get current version
      shell: bash
      id: current-version
      run: |
        current_version="$(poetry version --short --directory ${{ inputs.working-directory }} | sed 's/-dev$//')"
        echo "current_version=${current_version}" # debug
        echo "current_version=${current_version}" >> $GITHUB_OUTPUT
    - name: Set new pre-release version
      if: ${{ inputs.release }} == 'pre'
      shell: bash
      run: |
        NEW_VERSION=${{ steps.current-version.outputs.current_version }}-$(date +'%Y%m%d%H%M%S')
        echo "NEW_VERSION=${NEW_VERSION}" # debug
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
    - name: Set new release version
      if: ${{ inputs.release }} == 'yes'
      shell: bash
      run: |
        NEW_VERSION=${{ steps.current-version.outputs.current_version }}
        echo "NEW_VERSION=${NEW_VERSION}" # debug
        echo "NEW_VERSION=${NEW_VERSION}" >> $GITHUB_ENV
    - name: Update version
      shell: bash
      run: |
        VERSION_FILE=$(find "${{ inputs.working-directory }}/src/" -name "_version.py" -type f | head -n 1)
        echo "VERSION_FILE=${VERSION_FILE}" # debug
        echo "VERSION_FILE=${VERSION_FILE}" >> $GITHUB_ENV

        # Using poetry's version command to set a new version
        poetry version "${NEW_VERSION}" --directory ${{ inputs.working-directory }}

        # Overwrite the _version.py file with the new version
        echo "# this file is automatically generated and overwritten by CI process" > ${VERSION_FILE}
        echo "# to modify the content, modify the CI workflow file - .github/actions/release/action.yml" >> ${VERSION_FILE}
        echo "__version__ = \"${NEW_VERSION}\"" >> ${VERSION_FILE}
    - name: Set bodhilib min supported version
      if: ${{ env.IS_PLUGIN }} == 'true'
      shell: bash
      run: |
        # Get the min supported version
        min_supported_version=$(make ci.supports -- ${PROJECT_ID} --only-min --plaintext)
        echo "min_supported_version=${min_supported_version}" # debug
        poetry add bodhilib@">=${min_supported_version}" --directory ${{ inputs.working-directory }}
        poetry install --directory ${{ inputs.working-directory }}
    - name: Build package
      shell: bash
      run: |
        make ci.build ${PROJECT_ID}
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        artifacts: ${{ inputs.working-directory }}/dist/*
        tag: ${{ env.PROJECT_ID }}/v${{ env.NEW_VERSION }}
        name: ${{ env.PROJECT_ID }}/v${{ env.NEW_VERSION }}
        token: ${{ secrets.GITHUB_TOKEN }}
        commit: main
    - name: Publish package to PyPI
      if: ${{ inputs.release }} == 'yes'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
        print-hash: true
        packages-dir: ${{ inputs.working-directory }}/dist/
    - name: Bump patch version
      if: ${{ inputs.release }} == 'yes'
      shell: bash
      run: |
        IFS='.' read -ra ADDR <<< "$NEW_VERSION"
        new_patch=$(( ${ADDR[2]} + 1 ))
        BUMPED_VERSION="${ADDR[0]}.${ADDR[1]}.${new_patch}-dev"
        echo "BUMPED_VERSION=$BUMPED_VERSION" # debug
        echo "BUMPED_VERSION=$BUMPED_VERSION" >> $GITHUB_ENV
    - name: Update to next dev version
      if: ${{ inputs.release }} == 'yes'
      shell: bash
      run: |
        # Using poetry's version command to set a new version
        poetry version "${BUMPED_VERSION}" --directory ${{ inputs.working-directory }}

        # Overwrite the _version.py file with the new version
        echo "# this file is automatically generated and overwritten by CI process" > ${VERSION_FILE}
        echo "# to modify the content, modify the CI workflow file - .github/actions/release/action.yml" >> ${VERSION_FILE}
        echo "__version__ = \"${BUMPED_VERSION}\"" >> ${VERSION_FILE}
    - name: Run ci.update-lock-files and ci.lint
      if: ${{ inputs.release }} == 'yes'
      shell: bash
      run: |
        make ci.update-lock-files
        make ci.lint
    - name: Commit and push changes
      if: ${{ inputs.release }} == 'yes'
      shell: bash
      run: |
        git config user.name "GitHub Actions Bot"
        git config user.email "<github-actions@users.noreply.github.com>"
        git add ${{ inputs.working-directory }}/pyproject.toml ${VERSION_FILE} tox.ini **/poetry.lock
        git commit -m "[Github Workflows] For ${PROJECT_ID}, bumping up the patch version to ${BUMPED_VERSION}"
        git push
