name: run-test
description: run test

inputs:
  working-directory:
    description: Directory to run commands in
    required: true
  python-version:
    description: Python version, supporting MAJOR.MINOR only
    required: false
    default: '3.8'
  codecov-token:
    description: Codecov token
    required: false
    default: ''
  release:
    description: Release type
    required: false
    default: 'dev'

runs:
  using: composite
  steps:
    - name: Validate input args
      shell: bash
      run: |
        # fail if working dir does not exists
        if [[ ! -d "${{ inputs.working-directory }}" ]]; then
          echo "Working directory does not exist: ${{ inputs.working-directory }}"
          exit 1
        fi
        # fail if working dir does not have pyproject.toml
        if [[ ! -f "${{ inputs.working-directory }}/pyproject.toml" ]]; then
          echo "Working directory does not have pyproject.toml: ${{ inputs.working-directory }}"
          exit 1
        fi
    - name: set $PROJECT_ID
      shell: bash
      run: |
        if [[ "${{ inputs.working-directory }}" == "core" ]]; then
          PROJECT_ID=core
        else
          PROJECT_ID=$(echo ${{ inputs.working-directory }} | sed 's/plugins\///')
        fi
        echo "PROJECT_ID=$PROJECT_ID" # debug
        echo "PROJECT_ID=$PROJECT_ID" >> $GITHUB_ENV
    - name: Set up Python with Poetry
      uses: ./.github/actions/setup
      with:
        working-directory: '.'
    - name: Copy .env.ci to .env.test
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        cp .env.ci .env.test
    - name: tox-cache-key
      id: tox-cache-key
      shell: bash
      run: |
        # py38-plugins_bodhiext_common-bodhilib_dev

        py_version=$(echo ${{ inputs.python-version }} | sed 's/\.//')
        proj_id=$(echo ${{ inputs.working-directory }} | sed 's/\./_/' | sed 's/\//_/')
        hash_files=${{ hashFiles(format('{0}/poetry.lock', inputs.working-directory), format('{0}/tox.ini', inputs.working-directory)) }}
        restore_tox_cache_key=os-${{ runner.os }}-${{ runner.arch }}-py-${py_version}-loc-${proj_id}-reltype-${{ inputs.release }}-
        tox_cache_key=${restore_tox_cache_key}hash-${hash_files}
        echo "restore_tox_cache_key=${restore_tox_cache_key}"
        echo "restore_tox_cache_key=${restore_tox_cache_key}" >> $GITHUB_OUTPUT
        echo "tox_cache_key=${tox_cache_key}"
        echo "tox_cache_key=${tox_cache_key}" >> $GITHUB_OUTPUT
    - uses: actions/cache@v3
      id: cache-tox
      env:
        SEGMENT_DOWNLOAD_TIMEOUT_MIN: '15'
      with:
        path: |
          ${{ inputs.working-directory }}/.tox
          !${{ inputs.working-directory }}/.tox/*/log
        key: ${{ steps.tox-cache-key.outputs.tox_cache_key }}
        restore-keys: |
          ${{ steps.tox-cache-key.outputs.restore_tox_cache_key }}
    - name: Run tests
      shell: bash
      run: |
        python_version=$(echo ${{ inputs.python-version }} | sed 's/\.//')
        make_opts="--python-versions py${python_version}"
        if [[ "${{ inputs.release }}" == "pre" ]]; then
          make_opts+=" --only-min --include-prerelease"
        elif [[ "${{ inputs.release }}" == "dev" ]]; then
          make_opts+=" --only-dev"
        fi
        echo "make_opts=${make_opts}" # debug
        make ci.tox -- ${PROJECT_ID} ${make_opts}
    - name: Upload coverage reports to Codecov
      if: ${{ inputs.codecov-token != '' }}
      uses: codecov/codecov-action@v3
      with:
        env_vars: OS,PYTHON
        files: ${{ inputs.working-directory }}/coverage.xml
        flags: unittests,${PROJECT_ID},${{ inputs.release }}
      env:
        CODECOV_TOKEN: ${{ inputs.codecov-token }}
