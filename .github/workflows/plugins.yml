# workflow_dispatch/plugin/options generated by update_config.py using pre-commit, yaml reformatted
name: plugins
on:
  pull_request:
  push:
    branches: [main]
    tags: [v*]
    paths: [plugins/**, .github/**]
  workflow_dispatch:
    branches: [main]
    inputs:
      release:
        description: Publish a plugin library release (yes) or pre-release (pre) or none (no)? (yes/pre/no)
        required: false
        default: 'no'
      plugin:
        description: Plugin to release?
        type: choice
        options:
          - all
          - bodhiext.common
          - bodhiext.openai
        required: true
        default: all
jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: pre-commit
        uses: ./.github/actions/pre-commit
  determine_plugin:
    runs-on: ubuntu-latest
    needs: [pre-commit]
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      min-versions: ${{ steps.min-supported-versions.outputs.min-versions }}
    steps:
      - name: Install jq
        run: sudo apt-get install -y jq
      - name: Checkout repository
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: ./.github/actions/setup
      - name: Determine plugin(s) based on workflow input or git diff
        id: set-matrix
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # If the workflow was triggered manually with workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ "${{ github.event.inputs.plugin }}" == "all" ]]; then
              # Get all directories inside plugins
              PLUGINS=$(ls -d plugins/* | cut -d'/' -f2 | jq -R -s -c 'split("\n")[:-1]')
            else
              # If a specific plugin is provided as input
              PLUGINS=$(echo "[\"${{ github.event.inputs.plugin }}\"]")
            fi
          else
            # Logic based on git diff for push events
            LAST_SUCCESS_COMMIT=$(curl -H "Authorization: token $GITHUB_TOKEN" \
              "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/workflows/plugins.yml/runs?status=success&per_page=1" \
              | jq -r '.workflow_runs[0].head_sha')
            git fetch origin $LAST_SUCCESS_COMMIT
            PLUGINS=$(git diff --dirstat=files,0 $LAST_SUCCESS_COMMIT..$GITHUB_SHA \
              | grep 'plugins/' \
              | cut -d '/' -f2 \
              | uniq \
              | jq -R -s -c 'split("\n")[:-1]')
          fi
          echo "matrix=$PLUGINS" # debug
          echo "matrix=$PLUGINS" >> "$GITHUB_OUTPUT"
      - name: Find min supported bodhilib versions for each plugin
        if: ${{ toJson(fromJson(steps.set-matrix.outputs.matrix)) != '[]' }}
        id: min-supported-versions
        run: |
          plugins=$(echo '${{ steps.set-matrix.outputs.matrix }}' | jq -r 'join(" ")')
          echo "plugins=${plugins}" # debug
          min_versions=$(make ci.supports -- ${plugins} --only-min)
          echo "min-versions=${min_versions}" # debug
          echo "min-versions=${min_versions}" >> $GITHUB_OUTPUT
  run-test:
    needs: determine_plugin
    if: ${{ toJson(fromJson(needs.determine_plugin.outputs.matrix)) != '[]' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.determine_plugin.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set PLUGIN_DIR
        run: |
          PLUGIN_DIR=plugins/${{ matrix.plugin }}
          echo "PLUGIN_DIR=${PLUGIN_DIR}" # debug
          echo "PLUGIN_DIR=${PLUGIN_DIR}" >> $GITHUB_ENV
      - name: Run Test
        uses: ./.github/actions/run-test
        with:
          working-directory: ${{ env.PLUGIN_DIR }}
          codecov-token: ${{ secrets.CODECOV_TOKEN }}
  run-tox:
    needs: [run-test, determine_plugin]
    if: ${{ toJson(fromJson(needs.determine_plugin.outputs.matrix)) != '[]' && github.event.inputs.release != '' && (github.event.inputs.release == 'yes' || github.event.inputs.release == 'pre') }}
    strategy:
      fail-fast: false
      matrix:
        plugin: ${{ fromJson(needs.determine_plugin.outputs.matrix) }}
        os: [ubuntu-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Python with Poetry
        uses: ./.github/actions/setup
        with:
          python-version: ${{ matrix.python-version }}
      - name: Run tox
        run: |
          python_version=$(echo ${{ matrix.python-version }} | sed 's/\.//')
          make_opts="--python-versions py${python_version}"
          # if inputs set as pre or no, then find the min supported version, and the latest pre-release
          if [[ "${{ github.event.inputs.release }}" == "pre" ]]; then
            make_opts+=" --only-min --include-prerelease"
          fi
          echo "make_opts=${make_opts}" # debug
          make ci.tox -- ${{ matrix.plugin }} ${make_opts}
  prerelease:
    needs: [run-tox, determine_plugin]
    if: ${{ github.event.inputs.release == 'pre' && toJson(fromJson(needs.determine_plugin.outputs.matrix)) != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.determine_plugin.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set PLUGIN envs
        run: |
          PLUGIN_DIR=plugins/${{ matrix.plugin }}
          echo "PLUGIN_DIR=${PLUGIN_DIR}" # debug
          echo "PLUGIN_DIR=${PLUGIN_DIR}" >> $GITHUB_ENV
      - name: Pre-release
        uses: ./.github/actions/release
        with:
          working-directory: ${{ env.PLUGIN_DIR }}
          release: ${{ github.event.inputs.release }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  release:
    needs: [run-tox, determine_plugin]
    if: ${{ github.event.inputs.release == 'yes' && toJson(fromJson(needs.determine_plugin.outputs.matrix)) != '[]' }}
    strategy:
      matrix:
        plugin: ${{ fromJson(needs.determine_plugin.outputs.matrix) }}
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set PLUGIN envs
        run: |
          PLUGIN_DIR=plugins/${{ matrix.plugin }}
          echo "PLUGIN_DIR=${PLUGIN_DIR}" # debug
          echo "PLUGIN_DIR=${PLUGIN_DIR}" >> $GITHUB_ENV
      - name: Release
        uses: ./.github/actions/release
        with:
          working-directory: ${{ env.PLUGIN_DIR }}
          release: ${{ github.event.inputs.release }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
