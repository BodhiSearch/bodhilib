from _typeshed import Incomplete
from typing import Any, Dict, List, Protocol

class Condition(Protocol):
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
  def to_dict(self) -> Dict[str, Any]: ...

class OperatorCondition:
  operators: List[str]
  field: Incomplete
  operator: Incomplete
  value: Incomplete
  def __init__(self, field: str, operator: str, value: Any) -> None: ...
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
  def to_dict(self) -> Dict[str, Any]: ...

class And:
  conditions: Incomplete
  def __init__(self, conditions: List[Condition]) -> None: ...
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
  def to_dict(self) -> Dict[str, Any]: ...

class Or:
  conditions: Incomplete
  def __init__(self, conditions: List[Condition]) -> None: ...
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
  def to_dict(self) -> Dict[str, Any]: ...

class Nor:
  conditions: Incomplete
  def __init__(self, conditions: List[Condition]) -> None: ...
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
  def to_dict(self) -> Dict[str, Any]: ...

class Filter:
  condition: Incomplete
  def __init__(self, filter_expr: Dict[str, Any]) -> None: ...
  @staticmethod
  def from_dict(filter_dict: Dict[str, Any]) -> Filter: ...
  def to_dict(self) -> Dict[str, Any]: ...
  def evaluate(self, record: Dict[str, Any]) -> bool: ...
